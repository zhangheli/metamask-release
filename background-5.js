LavaPack.loadBundle([[80,{"../../shared/constants/app":3930,"../../shared/constants/hardware-wallets":3934,"../../shared/constants/keyring":3935,"../../shared/constants/metametrics":3937,"../../shared/constants/network":3938,"../../shared/constants/permissions":3939,"../../shared/constants/swaps":3943,"../../shared/constants/test-flags":3945,"../../shared/constants/time":3946,"../../shared/constants/tokens":3947,"../../shared/constants/transaction":3948,"../../shared/lib/metamask-controller-utils":3951,"../../shared/lib/token-util.ts":3955,"../../shared/modules/conversion.utils":3962,"../../shared/modules/mv3.utils":3968,"../../shared/modules/string-utils":3975,"../../shared/modules/transaction.utils":3977,"../../shared/notifications":3979,"./account-import-strategies":4,"./controllers/alert":7,"./controllers/app-state":8,"./controllers/backup":9,"./controllers/cached-balances":10,"./controllers/decrypt-message":11,"./controllers/detect-tokens":12,"./controllers/encryption-public-key":13,"./controllers/ens":15,"./controllers/incoming-transactions":16,"./controllers/metametrics":17,"./controllers/onboarding":18,"./controllers/permissions":22,"./controllers/preferences":26,"./controllers/swaps":27,"./controllers/transactions":28,"./detect-multiple-instances":34,"./lib/ComposableObservableStore":36,"./lib/account-tracker":37,"./lib/createDupeReqFilterMiddleware":39,"./lib/createLoggerMiddleware":40,"./lib/createMetaRPCHandler":41,"./lib/createMetamaskMiddleware":42,"./lib/createOnboardingMiddleware":43,"./lib/createOriginMiddleware":44,"./lib/createRPCMethodTrackingMiddleware":45,"./lib/createTabIdMiddleware":47,"./lib/rpc-method-middleware":71,"./lib/security-provider-helpers":72,"./lib/seed-phrase-verifier":73,"./lib/segment":75,"./lib/stream-utils":78,"./lib/util":79,"./translate":171,"@keystonehq/metamask-airgapped-keyring":578,"@metamask/address-book-controller":1047,"@metamask/announcement-controller":1049,"@metamask/approval-controller":1052,"@metamask/assets-controllers":1071,"@metamask/base-controller":1076,"@metamask/controller-utils":1081,"@metamask/eth-json-rpc-middleware":1134,"@metamask/eth-keyring-controller":1162,"@metamask/eth-ledger-bridge-keyring":1177,"@metamask/eth-trezor-keyring":1231,"@metamask/gas-fee-controller":1254,"@metamask/network-controller":1317,"@metamask/obs-store":1324,"@metamask/obs-store/dist/asStream":1323,"@metamask/permission-controller":1332,"@metamask/phishing-controller":1341,"@metamask/signature-controller":1411,"@metamask/smart-transactions-controller":1415,"@metamask/subject-metadata-controller":1491,"@sentry/browser":1606,"await-semaphore":2044,buffer:2170,"eth-json-rpc-filters":2473,"eth-json-rpc-filters/subscriptionManager":2475,"eth-lattice-keyring":2477,"eth-query":2567,"eth-rpc-errors":2571,events:2171,"json-rpc-engine":3223,"json-rpc-middleware-stream":3227,lodash:3426,loglevel:3438,nanoid:3481,pump:3578},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var n=Fe(e("events")),o=Fe(e("pump")),s=e("@metamask/obs-store"),i=e("@metamask/obs-store/dist/asStream"),a=e("json-rpc-engine"),l=e("json-rpc-middleware-stream"),c=e("@metamask/eth-json-rpc-middleware"),d=e("lodash"),h=e("@metamask/eth-keyring-controller"),u=Fe(e("eth-json-rpc-filters")),p=Fe(e("eth-json-rpc-filters/subscriptionManager")),g=e("eth-rpc-errors"),C=e("await-semaphore"),m=Fe(e("loglevel")),f=Fe(e("@metamask/eth-trezor-keyring")),k=Fe(e("@metamask/eth-ledger-bridge-keyring")),b=Fe(e("eth-lattice-keyring")),w=e("@keystonehq/metamask-airgapped-keyring"),v=Fe(e("eth-query")),y=Fe(e("nanoid")),T=e("@sentry/browser"),S=e("@metamask/address-book-controller"),M=e("@metamask/approval-controller"),P=e("@metamask/base-controller"),A=e("@metamask/assets-controllers"),E=e("@metamask/phishing-controller"),N=e("@metamask/announcement-controller"),I=e("@metamask/network-controller"),R=e("@metamask/gas-fee-controller"),O=e("@metamask/permission-controller"),L=e("@metamask/subject-metadata-controller"),_=Fe(e("@metamask/smart-transactions-controller")),F=e("@metamask/signature-controller"),U=e("@metamask/controller-utils"),D=e("../../shared/constants/transaction"),x=e("../../shared/constants/swaps"),j=e("../../shared/constants/network"),K=e("../../shared/constants/hardware-wallets"),B=e("../../shared/constants/keyring"),$=e("../../shared/constants/permissions"),q=e("../../shared/notifications"),G=e("../../shared/constants/time"),V=e("../../shared/constants/app"),H=e("../../shared/constants/metametrics"),W=e("../../shared/lib/token-util.ts"),z=e("../../shared/modules/string-utils"),Q=e("../../shared/modules/transaction.utils"),Y=e("../../shared/constants/tokens"),J=e("../../shared/lib/metamask-controller-utils"),X=e("../../shared/modules/mv3.utils"),Z=e("../../shared/modules/conversion.utils"),ee=e("../../shared/constants/test-flags"),te=e("./detect-multiple-instances"),re=Fe(e("./lib/ComposableObservableStore")),ne=Fe(e("./lib/account-tracker")),oe=Fe(e("./lib/createDupeReqFilterMiddleware")),se=Fe(e("./lib/createLoggerMiddleware")),ie=e("./lib/rpc-method-middleware"),ae=Fe(e("./lib/createOriginMiddleware")),le=Fe(e("./lib/createTabIdMiddleware")),ce=Fe(e("./lib/createOnboardingMiddleware")),de=e("./lib/stream-utils"),he=Fe(e("./controllers/ens")),ue=Fe(e("./controllers/preferences")),pe=Fe(e("./controllers/app-state")),ge=Fe(e("./controllers/cached-balances")),Ce=Fe(e("./controllers/alert")),me=Fe(e("./controllers/onboarding")),fe=Fe(e("./controllers/backup")),ke=Fe(e("./controllers/incoming-transactions")),be=Fe(e("./controllers/decrypt-message")),we=Fe(e("./controllers/transactions")),ve=Fe(e("./controllers/detect-tokens")),ye=Fe(e("./controllers/swaps")),Te=Fe(e("./account-import-strategies")),Se=Fe(e("./lib/seed-phrase-verifier")),Me=Fe(e("./controllers/metametrics")),Pe=e("./lib/segment"),Ae=Fe(e("./lib/createMetaRPCHandler")),Ee=e("./lib/util"),Ne=Fe(e("./lib/createMetamaskMiddleware")),Ie=Fe(e("./controllers/encryption-public-key")),Re=e("./controllers/permissions"),Oe=Fe(e("./lib/createRPCMethodTrackingMiddleware")),Le=e("./lib/security-provider-helpers"),_e=e("./translate");function Fe(e){return e&&e.__esModule?e:{default:e}}function Ue(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class De extends n.default{constructor(e){var t;super(),Ue(this,"handleWatchAssetRequest",((e,t,r)=>{switch(t){case U.ERC20:return this.tokensController.watchAsset(e,t);case U.ERC721:case U.ERC1155:return this.nftController.watchNft(e,t,r);default:throw new Error(`Asset type ${t} not supported`)}})),Ue(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Ue(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Ue(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Ue(this,"resolvePendingApproval",(async(e,t,r)=>{try{await this.approvalController.accept(e,t,r)}catch(e){if(!(e instanceof M.ApprovalRequestNotFoundError))throw e}})),Ue(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new g.EthereumRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof M.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:r}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,d.debounce)(this.privateSendUpdate.bind(this),200*G.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const n=e.initState||{},o=this.platform.getVersion();this.recordFirstTimeInfo(n),this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new P.ControllerMessenger,this.localStoreApiWrapper=e.localStore,this.store=new re.default({state:n,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new C.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&"8.1.0"===o&&this.platform.openExtensionInBrowser()})),this.approvalController=new M.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[U.ApprovalType.EthSign,U.ApprovalType.PersonalSign,U.ApprovalType.EthSignTypedData,U.ApprovalType.Transaction,U.ApprovalType.WatchAsset,U.ApprovalType.EthGetEncryptionPublicKey,U.ApprovalType.EthDecrypt]});const s=this.controllerMessenger.getRestricted({name:"NetworkController",allowedEvents:["NetworkController:stateChange","NetworkController:networkWillChange","NetworkController:networkDidChange","NetworkController:infuraIsBlocked","NetworkController:infuraIsUnblocked"]});let i;const a=i?{providerConfig:i,...n.NetworkController}:n.NetworkController;this.networkController=new I.NetworkController({messenger:s,state:a,infuraProjectId:e.infuraProjectId,trackMetaMetricsEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker;const l=this.controllerMessenger.getRestricted({name:"TokenListController",allowedEvents:["TokenListController:stateChange","NetworkController:stateChange"]});this.tokenListController=new A.TokenListController({chainId:this.networkController.state.providerConfig.chainId,preventPollingOnNetworkRestart:!n.TokenListController||n.TokenListController.preventPollingOnNetworkRestart,messenger:l,state:n.TokenListController}),this.preferencesController=new ue.default({initState:n.PreferencesController,initLangCode:e.initLangCode,onInfuraIsBlocked:s.subscribe.bind(s,"NetworkController:infuraIsBlocked"),onInfuraIsUnblocked:s.subscribe.bind(s,"NetworkController:infuraIsUnblocked"),tokenListController:this.tokenListController,provider:this.provider}),this.preferencesController.store.subscribe((async({currentLocale:e})=>{await(0,_e.updateCurrentLocale)(e)}));const c=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest"],allowedEvents:["NetworkController:stateChange"]});this.tokensController=new A.TokensController({messenger:c,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange"),config:{provider:this.provider},state:n.TokensController}),this.assetsContractController=new A.AssetsContractController({chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkStateChange:e=>s.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)}))},{provider:this.provider},n.AssetsContractController);const u=this.controllerMessenger.getRestricted({name:"NftController",allowedActions:[`${this.approvalController.name}:addRequest`]});this.nftController=new A.NftController({messenger:u,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange"),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onNftAdded:({address:e,symbol:t,tokenId:r,standard:n,source:o})=>this.metaMetricsController.trackEvent({event:H.MetaMetricsEventName.NftAdded,category:H.MetaMetricsEventCategory.Wallet,properties:{token_contract_address:e,token_symbol:t,asset_type:D.AssetType.NFT,token_standard:n,source:o},sensitiveProperties:{tokenId:r}})},{},n.NftController),this.nftController.setApiKey(null),this.nftDetectionController=new A.NftDetectionController({chainId:this.networkController.state.providerConfig.chainId,onNftsStateChange:e=>this.nftController.subscribe(e),onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange"),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftState:()=>this.nftController.state}),this.metaMetricsController=new Me.default({segment:Pe.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:s.subscribe.bind(s,"NetworkController:networkDidChange"),getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===j.NETWORK_TYPES.RPC?t:e},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,version:this.platform.getVersion(),environment:"other",extension:this.extension,initState:n.MetaMetricsController,captureException:T.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const p=this.controllerMessenger.getRestricted({name:"GasFeeController"}),v=x.GAS_API_BASE_URL;this.gasFeeController=new R.GasFeeController({state:n.GasFeeController,interval:1e4,messenger:p,clientId:x.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkStateChange:e=>{s.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),EIP1559APIEndpoint:`${v}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>!1,getChainId:()=>this.networkController.state.providerConfig.chainId}),this.qrHardwareKeyring=new w.MetaMaskKeyring,this.appStateController=new pe.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:n.AppStateController,onInactiveTimeout:()=>this.setLocked(),preferencesStore:this.preferencesController.store,qrHardwareStore:this.qrHardwareKeyring.getMemStore(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`]})});const y=this.controllerMessenger.getRestricted({name:"CurrencyRateController"});this.currencyRateController=new A.CurrencyRateController({includeUsdRate:!0,messenger:y,state:{...n.CurrencyController,nativeCurrency:this.networkController.state.providerConfig.ticker}}),this.phishingController=new E.PhishingController({},n.PhishingController),this.phishingController.maybeUpdateState();const K=this.controllerMessenger.getRestricted({name:"AnnouncementController"});let B=q.UI_NOTIFICATIONS;this.announcementController=new N.AnnouncementController({messenger:K,allAnnouncements:B,state:n.AnnouncementController}),this.tokenRatesController=new A.TokenRatesController({chainId:this.networkController.state.providerConfig.chainId,onTokensStateChange:e=>this.tokensController.subscribe(e),onCurrencyRateStateChange:e=>this.controllerMessenger.subscribe(`${this.currencyRateController.name}:stateChange`,e),onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange")},{disabled:!this.preferencesController.store.getState().useCurrencyRateCheck},n.TokenRatesController),this.preferencesController.store.subscribe((0,Ee.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:r}=e,{useCurrencyRateCheck:n}=t;n&&!r?(this.currencyRateController.start(),this.tokenRatesController.configure({disabled:!1},!1,!1)):!n&&r&&(this.currencyRateController.stop(),this.tokenRatesController.configure({disabled:!0},!1,!1))}),this.preferencesController.store.getState())),this.ensController=new he.default({provider:this.provider,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,onNetworkDidChange:s.subscribe.bind(s,"NetworkController:networkDidChange")}),this.onboardingController=new me.default({initState:n.OnboardingController}),this.incomingTransactionsController=new ke.default({blockTracker:this.blockTracker,onNetworkDidChange:s.subscribe.bind(s,"NetworkController:networkDidChange"),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,preferencesController:this.preferencesController,onboardingController:this.onboardingController,initState:n.IncomingTransactionsController}),this.accountTracker=new ne.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===j.NETWORK_TYPES.RPC?t:e},preferencesController:this.preferencesController,onboardingController:this.onboardingController,initState:X.isManifestV3&&!1===r&&null!==(t=n.AccountTracker)&&void 0!==t&&t.accounts?{accounts:n.AccountTracker.accounts}:{accounts:{}}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.store.getState();e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.onboardingController.store.subscribe((0,Ee.previousValueComparator)((async(e,t)=>{const{completedOnboarding:r}=e,{completedOnboarding:n}=t;!r&&n&&this.triggerNetworkrequests()}),this.onboardingController.store.getState())),this.cachedBalancesController=new ge.default({accountTracker:this.accountTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,initState:n.CachedBalancesController});let Y=[(0,h.keyringBuilderFactory)(w.MetaMaskKeyring)];if(this.canUseHardwareWallets()){var Z;const e=null===(Z=this.opts.overrides)||void 0===Z?void 0:Z.keyrings;Y=[(null==e?void 0:e.trezor)||f.default,(null==e?void 0:e.ledger)||k.default,(null==e?void 0:e.lattice)||b.default,w.MetaMaskKeyring].map((e=>(0,h.keyringBuilderFactory)(e)))}this.keyringController=new h.KeyringController({keyringBuilders:Y,initState:n.KeyringController,encryptor:e.encryptor||undefined,cacheEncryptionKey:X.isManifestV3}),this.keyringController.memStore.subscribe((e=>this._onKeyringControllerUpdate(e))),this.keyringController.on("unlock",(()=>this._onUnlock())),this.keyringController.on("lock",(()=>this._onLock()));const ee=()=>this.preferencesController.store.getState().identities;this.permissionController=new O.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:n.PermissionController,caveatSpecifications:(0,Re.getCaveatSpecifications)({getIdentities:ee}),permissionSpecifications:{...(0,Re.getPermissionSpecifications)({getIdentities:ee,getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e={},t=[])=>{const r=t.filter((t=>!e[t])).map((e=>{var t;return null===(t=this.keyringController.getKeyringForAccount(e))||void 0===t?void 0:t.type})),n=Object.keys(e||{}).length,o=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,T.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${o} accounts in the account tracker.`))}})},unrestrictedMethods:Re.unrestrictedMethods}),this.permissionLogController=new Re.PermissionLogController({restrictedMethods:new Set(Object.keys($.RestrictedMethods)),initState:n.PermissionLogController}),this.subjectMetadataController=new L.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:n.SubjectMetadataController,subjectCacheLimit:100});const oe=this.controllerMessenger.getRestricted({name:"DetectTokensController",allowedEvents:["NetworkController:stateChange"]});if(this.detectTokensController=new ve.default({messenger:oe,preferences:this.preferencesController,tokensController:this.tokensController,assetsContractController:this.assetsContractController,network:this.networkController,keyringMemStore:this.keyringController.memStore,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.addressBookController=new S.AddressBookController(undefined,n.AddressBookController),this.alertController=new Ce.default({initState:n.AlertController,preferencesStore:this.preferencesController.store}),this.backupController=new fe.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.txController=new we.default({initState:n.TransactionController||n.TransactionManager,getPermittedAccounts:this.getPermittedAccounts.bind(this),getProviderConfig:()=>this.networkController.state.providerConfig,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getNetworkId:()=>this.networkController.state.networkId,getNetworkStatus:()=>this.networkController.state.networkStatus,onNetworkStateChange:e=>{s.subscribe("NetworkController:stateChange",(()=>e()),(({networkId:e})=>e))},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,preferencesStore:this.preferencesController.store,txHistoryLimit:60,signTransaction:this.keyringController.signTransaction.bind(this.keyringController),provider:this.provider,blockTracker:this.blockTracker,createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),messenger:this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]})}),this.txController.on("tx:status-update",(async(e,t)=>{if(t===D.TransactionStatus.confirmed||t===D.TransactionStatus.failed){const t=this.txController.txStateManager.getTransaction(e);let s={};if(t.chainId){const{networkConfigurations:e}=this.networkController.state,r=Object.values(e).find((e=>e.chainId===t.chainId));s=(null==r?void 0:r.rpcPrefs)??{}}try{await this.platform.showTransactionNotification(t,s)}catch(e){m.default.error("Failed to create transaction notification",e)}const{txReceipt:i}=t;if(t.type===D.TransactionType.tokenMethodTransferFrom&&t.txParams!==undefined){var r,n;const{data:e,to:o,from:s}=t.txParams,{chainId:i}=t,a=(0,Q.parseStandardTokenTransactionData)(e),l=(0,W.getTokenIdParam)(a)??(0,J.getTokenValueParam)(a),{allNfts:c}=this.nftController.state,d=null==c||null===(r=c[s])||void 0===r||null===(n=r[i])||void 0===n?void 0:n.find((({address:e,tokenId:t})=>(0,z.isEqualCaseInsensitive)(e,o)&&t===l));d&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(d,!1,{userAddress:s,chainId:i})}const a=this.getState();var o;if(i&&"0x0"===i.status)this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:H.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(o=t.simulationFails)||void 0===o?void 0:o.reason,numberOfTokens:a.tokens.length,numberOfAccounts:Object.keys(a.accounts).length}},{matomoEvent:!0})}})),s.subscribe("NetworkController:networkDidChange",(async()=>{const{ticker:e}=this.networkController.state.providerConfig;try{await this.currencyRateController.setNativeCurrency(e)}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.decryptMessageController=new be.default({getState:this.getState.bind(this),keyringController:this.keyringController,messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Ie.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),keyringController:this.keyringController,getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new F.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`]}),keyringController:this.keyringController,isEthSignEnabled:()=>{var e,t;return null===(e=this.preferencesController.store.getState())||void 0===e||null===(t=e.disabledRpcMethodPreferences)||void 0===t?void 0:t.eth_sign},getAllState:this.getState.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:H.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})})),this.swapsController=new ye.default({getBufferedGasLimit:this.txController.txGasUtil.getBufferedGasLimit.bind(this.txController.txGasUtil),networkController:this.networkController,onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange"),provider:this.provider,getProviderConfig:()=>this.networkController.state.providerConfig,getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController)},n.SwapsController),this.smartTransactionsController=new _.default({onNetworkStateChange:s.subscribe.bind(s,"NetworkController:stateChange"),getNetwork:()=>this.networkController.state.networkId??"loading",getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},{supportedChainIds:[j.CHAIN_IDS.MAINNET,j.CHAIN_IDS.GOERLI]},n.SmartTransactionsController),this.txController.on("newSwapApproval",(e=>{this.swapsController.setApproveTxId(e.id)})),this.txController.on("newSwap",(e=>{this.swapsController.setTradeTxId(e.id)})),s.subscribe("NetworkController:networkDidChange",(()=>{this.accountTracker._updateAccounts()})),s.subscribe("NetworkController:networkWillChange",(()=>{this.txController.txStateManager.clearUnapprovedTxs(),this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved()})),X.isManifestV3&&globalThis.isFirstTimeProfileLoaded===undefined){const{serviceWorkerLastActiveTime:e}=this.appStateController.store.getState(),t={category:H.MetaMetricsEventCategory.ServiceWorkers,event:H.MetaMetricsEventName.ServiceWorkerRestarted,properties:{service_worker_restarted_time:Date.now()-e}};try{this.metaMetricsController.trackEvent(t)}catch(e){m.default.warn("Failed to track service worker restart metric:",e)}}this.metamaskMiddleware=(0,Ne.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${o}`},version:o,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===V.ORIGIN_METAMASK){const e=this.preferencesController.getSelectedAddress();return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:this.newUnapprovedTransaction.bind(this),processEthSignMessage:this.signatureController.newUnsignedMessage.bind(this.signatureController),processTypedMessage:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV3:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV4:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processPersonalMessage:this.signatureController.newUnsignedPersonalMessage.bind(this.signatureController),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.getTransactions({searchCriteria:{hash:e,status:D.TransactionStatus.submitted}})[0]}),this.on("update",(e=>this._onStateUpdate(e)));const se={AccountTracker:this.accountTracker.store,TxController:this.txController.memStore,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController};this.store.updateStructure({AppStateController:this.appStateController.store,TransactionController:this.txController.store,KeyringController:this.keyringController.store,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,CachedBalancesController:this.cachedBalancesController.store,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,...se}),this.memStore=new re.default({config:{AppStateController:this.appStateController.store,NetworkController:this.networkController,CachedBalancesController:this.cachedBalancesController.store,KeyringController:this.keyringController.memStore,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,...se},controllerMessenger:this.controllerMessenger});const ie=[this.accountTracker.resetState,this.txController.resetState,this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState,this.ensController.resetState,this.approvalController.clear.bind(this.approvalController)];X.isManifestV3?!0===r&&(this.resetStates(ie),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(ie),!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding?this._loginUser():this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(te.onMessageReceived),(0,te.checkForMultipleVersionsRunning)()}triggerNetworkrequests(){this.accountTracker.start(),this.incomingTransactionsController.start(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.start(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()}stopNetworkRequests(){this.accountTracker.stop(),this.incomingTransactionsController.stop(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.stop(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.stop()}canUseHardwareWallets(){return!X.isManifestV3||!1}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}setupControllerEventSubscriptions(){const e=async(e,t)=>{this.isUnlocked()&&this.notifyConnections(e,{method:Re.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)};let t;this.preferencesController.store.subscribe((async({selectedAddress:r})=>{if(r&&r!==t){t=r;const n=(0,Re.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[t,o]of n.entries())o.includes(r)&&e(t,o)}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(t,r)=>{const n=(0,Re.getChangedAccounts)(t,r);for(const[t,r]of n.entries())e(t,r)}),Re.getPermittedAccountsByOrigin)}createPublicConfigStore(){const e=new s.ObservableStore,{networkController:t}=this;function r(r){const{chainId:n}=t.state.providerConfig;r.networkStatus===j.NetworkStatus.Available&&e.putState(function(e,{isUnlocked:t,networkId:r}){return{isUnlocked:t,chainId:e,networkVersion:r??"loading"}}(n,r))}return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),...this.getProviderNetworkState(),accounts:await this.getPermittedAccounts(e)}}getProviderNetworkState(e){const{networkId:t}=e||this.getState();return{chainId:this.networkController.state.providerConfig.chainId,networkVersion:t??"loading"}}getState(){const{vault:e}=this.keyringController.store.getState();return{isInitialized:Boolean(e),...this.memStore.getFlatState()}}getApi(){const{addressBookController:e,alertController:t,appStateController:r,nftController:n,nftDetectionController:o,currencyRateController:s,detectTokensController:i,ensController:a,gasFeeController:l,metaMetricsController:c,networkController:d,announcementController:h,onboardingController:u,permissionController:p,preferencesController:g,qrHardwareKeyring:C,swapsController:m,tokensController:f,smartTransactionsController:k,txController:b,assetsContractController:w,backupController:v,approvalController:y}=this;return{getState:this.getState.bind(this),setCurrentCurrency:s.setCurrentCurrency.bind(s),setUseBlockie:g.setUseBlockie.bind(g),setUseNonceField:g.setUseNonceField.bind(g),setUsePhishDetect:g.setUsePhishDetect.bind(g),setUseMultiAccountBalanceChecker:g.setUseMultiAccountBalanceChecker.bind(g),setUseTokenDetection:g.setUseTokenDetection.bind(g),setUseNftDetection:g.setUseNftDetection.bind(g),setUseCurrencyRateCheck:g.setUseCurrencyRateCheck.bind(g),setOpenSeaEnabled:g.setOpenSeaEnabled.bind(g),setIpfsGateway:g.setIpfsGateway.bind(g),setParticipateInMetaMetrics:c.setParticipateInMetaMetrics.bind(c),setCurrentLocale:g.setCurrentLocale.bind(g),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:y.addAndShowApprovalRequest.bind(y),addNewAccount:this.addNewAccount.bind(this),verifySeedPhrase:this.verifySeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),setLedgerTransportPreference:this.setLedgerTransportPreference.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),establishLedgerTransportPreference:this.establishLedgerTransportPreference.bind(this),submitQRHardwareCryptoHDKey:C.submitCryptoHDKey.bind(C),submitQRHardwareCryptoAccount:C.submitCryptoAccount.bind(C),cancelSyncQRHardware:C.cancelSync.bind(C),submitQRHardwareSignature:C.submitSignature.bind(C),cancelQRHardwareSignRequest:C.cancelSignRequest.bind(C),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:d.setProviderType.bind(d),rollbackToPreviousProvider:d.rollbackToPreviousProvider.bind(d),removeNetworkConfiguration:d.removeNetworkConfiguration.bind(d),setActiveNetwork:d.setActiveNetwork.bind(d),upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),setSelectedAddress:g.setSelectedAddress.bind(g),addToken:f.addToken.bind(f),updateTokenType:f.updateTokenType.bind(f),setAccountLabel:g.setAccountLabel.bind(g),setFeatureFlag:g.setFeatureFlag.bind(g),setPreference:g.setPreference.bind(g),addKnownMethodData:g.addKnownMethodData.bind(g),setDismissSeedBackUpReminder:g.setDismissSeedBackUpReminder.bind(g),setDisabledRpcMethodPreference:g.setDisabledRpcMethodPreference.bind(g),getRpcMethodPreferences:g.getRpcMethodPreferences.bind(g),setAdvancedGasFee:g.setAdvancedGasFee.bind(g),setTheme:g.setTheme.bind(g),setTransactionSecurityCheckEnabled:g.setTransactionSecurityCheckEnabled.bind(g),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),addNft:n.addNft.bind(n),addNftVerifyOwnership:n.addNftVerifyOwnership.bind(n),removeAndIgnoreNft:n.removeAndIgnoreNft.bind(n),removeNft:n.removeNft.bind(n),checkAndUpdateAllNftsOwnershipStatus:n.checkAndUpdateAllNftsOwnershipStatus.bind(n),checkAndUpdateSingleNftOwnershipStatus:n.checkAndUpdateSingleNftOwnershipStatus.bind(n),isNftOwner:n.isNftOwner.bind(n),setAddressBook:e.set.bind(e),removeFromAddressBook:e.delete.bind(e),setLastActiveTime:r.setLastActiveTime.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowProductTour:r.setShowProductTour.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),setFirstTimeUsedNetwork:r.setFirstTimeUsedNetwork.bind(r),tryReverseResolveAddress:a.reverseResolveAddress.bind(a),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:b.updateTransaction.bind(b),approveTransactionsWithSameNonce:b.approveTransactionsWithSameNonce.bind(b),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addUnapprovedTransaction:b.addUnapprovedTransaction.bind(b),createTransactionEventFragment:b.createTransactionEventFragment.bind(b),getTransactions:b.getTransactions.bind(b),updateEditableParams:b.updateEditableParams.bind(b),updateTransactionGasFees:b.updateTransactionGasFees.bind(b),updateTransactionSendFlowHistory:b.updateTransactionSendFlowHistory.bind(b),updatePreviousGasParams:b.updatePreviousGasParams.bind(b),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:u.setSeedPhraseBackedUp.bind(u),completeOnboarding:u.completeOnboarding.bind(u),setFirstTimeFlowType:u.setFirstTimeFlowType.bind(u),setAlertEnabledness:t.setAlertEnabledness.bind(t),setUnconnectedAccountAlertShown:t.setUnconnectedAccountAlertShown.bind(t),setWeb3ShimUsageAlertDismissed:t.setWeb3ShimUsageAlertDismissed.bind(t),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,Re.getPermissionBackgroundApiMethods)(p),fetchAndSetQuotes:m.fetchAndSetQuotes.bind(m),setSelectedQuoteAggId:m.setSelectedQuoteAggId.bind(m),resetSwapsState:m.resetSwapsState.bind(m),setSwapsTokens:m.setSwapsTokens.bind(m),clearSwapsQuotes:m.clearSwapsQuotes.bind(m),setApproveTxId:m.setApproveTxId.bind(m),setTradeTxId:m.setTradeTxId.bind(m),setSwapsTxGasPrice:m.setSwapsTxGasPrice.bind(m),setSwapsTxGasLimit:m.setSwapsTxGasLimit.bind(m),setSwapsTxMaxFeePerGas:m.setSwapsTxMaxFeePerGas.bind(m),setSwapsTxMaxFeePriorityPerGas:m.setSwapsTxMaxFeePriorityPerGas.bind(m),safeRefetchQuotes:m.safeRefetchQuotes.bind(m),stopPollingForQuotes:m.stopPollingForQuotes.bind(m),setBackgroundSwapRouteState:m.setBackgroundSwapRouteState.bind(m),resetPostFetchState:m.resetPostFetchState.bind(m),setSwapsErrorKey:m.setSwapsErrorKey.bind(m),setInitialGasEstimate:m.setInitialGasEstimate.bind(m),setCustomApproveTxData:m.setCustomApproveTxData.bind(m),setSwapsLiveness:m.setSwapsLiveness.bind(m),setSwapsFeatureFlags:m.setSwapsFeatureFlags.bind(m),setSwapsUserFeeLevel:m.setSwapsUserFeeLevel.bind(m),setSwapsQuotesPollingLimitEnabled:m.setSwapsQuotesPollingLimitEnabled.bind(m),setSmartTransactionsOptInStatus:k.setOptInState.bind(k),fetchSmartTransactionFees:k.getFees.bind(k),clearSmartTransactionFees:k.clearFees.bind(k),submitSignedTransactions:k.submitSignedTransactions.bind(k),cancelSmartTransaction:k.cancelSmartTransaction.bind(k),fetchSmartTransactionsLiveness:k.fetchLiveness.bind(k),updateSmartTransaction:k.updateSmartTransaction.bind(k),setStatusRefreshInterval:k.setStatusRefreshInterval.bind(k),trackMetaMetricsEvent:c.trackEvent.bind(c),trackMetaMetricsPage:c.trackPage.bind(c),createEventFragment:c.createEventFragment.bind(c),updateEventFragment:c.updateEventFragment.bind(c),finalizeEventFragment:c.finalizeEventFragment.bind(c),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,updateViewedNotifications:h.updateViewed.bind(h),getGasFeeEstimatesAndStartPolling:l.getGasFeeEstimatesAndStartPolling.bind(l),disconnectGasFeeEstimatePoller:l.disconnectPoller.bind(l),getGasFeeTimeEstimate:l.getTimeEstimate.bind(l),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),backupUserData:v.backupUserData.bind(v),restoreUserData:v.restoreUserData.bind(v),detectNewTokens:i.detectNewTokens.bind(i),detectNfts:o.detectNfts.bind(o),addDetectedTokens:f.addDetectedTokens.bind(f),addImportedTokens:f.addTokens.bind(f),ignoreTokens:f.ignoreTokens.bind(f),getBalancesInSingleCall:w.getBalancesInSingleCall.bind(w)}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(e,t)}async getTokenStandardAndDetails(e,t,r){var n,o,s,i;const{tokenList:a}=this.tokenListController.state,{tokens:l}=this.tokensController.state,c={...Y.STATIC_MAINNET_TOKEN_LIST[e.toLowerCase()]||{},...a[e.toLowerCase()]||{},...l.find((({address:t})=>(0,z.isEqualCaseInsensitive)(t,e)))||{}},d=(0,z.isEqualCaseInsensitive)(c.standard,D.TokenStandard.ERC20)||!0===c.erc20,h=!(r||(0,z.isEqualCaseInsensitive)(c.standard,D.TokenStandard.ERC1155)||(0,z.isEqualCaseInsensitive)(c.standard,D.TokenStandard.ERC721)||c.erc721),u=c.decimals!==undefined&&c.symbol;let p;if(d||h&&u)try{const r=await(0,W.fetchTokenBalance)(e,t,this.provider);p={address:e,balance:r,standard:D.TokenStandard.ERC20,decimals:c.decimals,symbol:c.symbol}}catch(e){m.default.warning(`Failed to get token balance. Error: ${e}`)}return p===undefined&&(p=await this.assetsContractController.getTokenStandardAndDetails(e,t,r)),{...p,decimals:null===(n=p)||void 0===n||null===(o=n.decimals)||void 0===o?void 0:o.toString(10),balance:null===(s=p)||void 0===s||null===(i=s.balance)||void 0===i?void 0:i.toString(10)}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{let t;if((await this.keyringController.getAccounts()).length>0)t=await this.keyringController.fullUpdate();else{t=await this.keyringController.createNewVaultAndKeychain(e);const r=await this.keyringController.getAccounts();this.preferencesController.setAddresses(r),this.selectFirstIdentity()}return t}finally{t()}}async createNewVaultAndRestore(e,r){const n=await this.createVaultMutex.acquire();try{let n,o;const s=t.from(r),{keyringController:i}=this;this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.accountTracker.clearAccounts(),this.cachedBalancesController.clearCachedBalances(),this.txController.txStateManager.clearUnapprovedTxs();const a=await i.createNewVaultAndRestore(e,s),l=new v.default(this.provider);n=await i.getAccounts(),o=await this.getBalance(n[n.length-1],l);const[c]=i.getKeyringsByType(B.KeyringType.hdKeyTree);if(!c)throw new Error("MetamaskController - No HD Key Tree found");for(;"0x0"!==o;)await i.addNewAccount(c),n=await i.getAccounts(),o=await this.getBalance(n[n.length-1],l);n.length>1&&"0x0"===o&&(await this.removeAccount(n[n.length-1]),n=await i.getAccounts());const d=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(d),this.preferencesController.setAddresses(n),this.selectFirstIdentity(),a}finally{n()}}getBalance(e,t){return new Promise(((r,n)=>{const o=this.accountTracker.store.getState().accounts[e];o&&o.balance?r(o.balance):t.getBalance(e,((e,t)=>{e?(n(e),m.default.error(e)):r(t||"0x0")}))}))}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){m.default.error("Error while unlocking extension.",e)}const t=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(t),this.keyringController.fullUpdate()}async _loginUser(){try{const e=null;e?await this.submitPassword(e):X.isManifestV3&&await this.submitEncryptionKey(),await this.accountTracker._updateAccounts()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:r}=this.keyringController.store.getState();if(JSON.parse(r).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstIdentity(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(B.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var r,n,o,s;const i=null===(r=this.opts.overrides)||void 0===r?void 0:r.keyrings;let a=null;if(e!==K.HardwareDeviceNames.QR&&!this.canUseHardwareWallets())throw new Error("Hardware wallets are not supported on this version.");switch(e){case K.HardwareDeviceNames.trezor:a=(null==i||null===(n=i.trezor)||void 0===n?void 0:n.type)||f.default.type;break;case K.HardwareDeviceNames.ledger:a=(null==i||null===(o=i.ledger)||void 0===o?void 0:o.type)||k.default.type;break;case K.HardwareDeviceNames.qr:a=w.MetaMaskKeyring.type;break;case K.HardwareDeviceNames.lattice:a=(null==i||null===(s=i.lattice)||void 0===s?void 0:s.type)||b.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(a);if(l||(l=await this.keyringController.addNewKeyring(a)),t&&l.setHdPath&&l.setHdPath(t),e===K.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===K.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=this.networkController.state.providerConfig.type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(K.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async establishLedgerTransportPreference(){const e=this.preferencesController.getLedgerTransportPreference();return await this.setLedgerTransportPreference(e)}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let o=[];switch(t){case-1:o=await n.getPreviousPage();break;case 1:o=await n.getNextPage();break;default:o=await n.getFirstPage()}const s=await this.keyringController.getAccounts(),i=[...new Set(s.concat(o.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),o}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){return(await this.getKeyringForDevice(e)).forgetDevice(),!0}async getAccountType(e){switch((await this.keyringController.getKeyringForAccount(e)).type){case B.KeyringType.trezor:case B.KeyringType.lattice:case B.KeyringType.qr:case B.KeyringType.ledger:return"hardware";case B.KeyringType.imported:return"imported";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case B.KeyringType.trezor:return t.getModel();case B.KeyringType.qr:return t.getName();case B.KeyringType.ledger:return K.HardwareDeviceNames.ledger;case B.KeyringType.lattice:return K.HardwareDeviceNames.lattice;default:return"N/A"}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const o=await this.getKeyringForDevice(t,r);o.setAccountToUnlock(e);const s=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccount(o),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!s.includes(r)){const s=this.getAccountLabel(t===K.HardwareDeviceNames.qr?o.getName():t,e,n);this.preferencesController.setAccountLabel(r,s),this.preferencesController.setSelectedAddress(r)}}));const{identities:l}=this.preferencesController.store.getState();return{...i,identities:l}}async addNewAccount(e){this.appStateController.store.getState()[ee.ACTION_QUEUE_METRICS_E2E_TEST];const[t]=this.keyringController.getKeyringsByType(B.KeyringType.hdKeyTree);if(!t)throw new Error("MetamaskController - No HD Key Tree found");const{keyringController:r}=this,{identities:n}=this.preferencesController.store.getState();if(Object.keys(n).length===e){const e=await r.getAccounts(),n=await r.addNewAccount(t),o=await r.getAccounts();await this.verifySeedPhrase(),this.preferencesController.setAddresses(o),o.forEach((t=>{e.includes(t)||this.preferencesController.setSelectedAddress(t)}));const{identities:s}=this.preferencesController.store.getState();return{...n,identities:s}}return{...r.memStore.getState(),identities:n}}async verifySeedPhrase(){const[e]=this.keyringController.getKeyringsByType(B.KeyringType.hdKeyTree);if(!e)throw new Error("MetamaskController - No HD Key Tree found");const r=await e.serialize(),n=t.from(r.mnemonic),o=await e.getAccounts();if(o.length<1)throw new Error("MetamaskController - No accounts found");try{return await Se.default.verifyAccounts(o,n),Array.from(n.values())}catch(e){throw m.default.error(e.message),e}}async resetAccount(){const e=this.preferencesController.getSelectedAddress();return this.txController.wipeTransactions(e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,$.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===g.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat($.CaveatTypes.restrictReturnedAccounts,(t=>Re.CaveatMutatorFactories[$.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e),this.preferencesController.removeAddress(e),this.accountTracker.removeAccount([e]);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const r=await Te.default.importAccount(e,t),n=await this.keyringController.addNewKeyring(B.KeyringType.imported,[r]),[o]=await n.getAccounts(),s=await this.keyringController.getAccounts();this.preferencesController.setAddresses(s),this.preferencesController.setSelectedAddress(o)}async newUnapprovedTransaction(e,t){return await this.txController.newUnapprovedTransaction(e,t)}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.createCancelTransaction(e,t,r);return this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.createSpeedUpTransaction(e,t,r);return this.getState()}estimateGas(e){return new Promise(((t,r)=>this.txController.txGasUtil.query.estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let o;if(o=r||(t.id&&t.id!==this.extension.runtime.id?L.SubjectType.Extension:L.SubjectType.Website),t.url){const{hostname:r}=new URL(t.url);this.phishingController.maybeUpdateState();const o=this.phishingController.test(r);if(n&&null!=o&&o.result)return this.sendPhishingWarning(e,r),void this.metaMetricsController.trackEvent({event:H.MetaMetricsEventName.PhishingPageDisplayed,category:H.MetaMetricsEventCategory.Phishing,properties:{url:r}})}const s=(0,de.setupMultiplex)(e);this.setupProviderConnection(s.createStream("metamask-provider"),t,o),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,de.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,L.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,de.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,Ae.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},r))}sendPhishingWarning(e,t){(0,de.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,Ae.default)(t,e,this.store,this.localStoreApiWrapper));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r);const n=()=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?n():this.once("startUISync",n),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===L.SubjectType.Internal?V.ORIGIN_METAMASK:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:L.SubjectType.Extension}),t.tab&&t.tab.id&&(s=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),a=(0,l.createEngineStream)({engine:i}),c=this.addConnection(n,{engine:i});(0,o.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),c&&this.removeConnection(n,c),e&&m.default.error(e)}))}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const o=new a.JsonRpcEngine,{blockTracker:s,provider:i}=this,l=(0,u.default)({provider:i,blockTracker:s}),d=(0,p.default)({provider:i,blockTracker:s});return d.events.on("notification",(e=>o.emit("notification",e))),X.isManifestV3&&o.push((0,oe.default)()),o.push((0,ae.default)({origin:e})),n&&o.push((0,le.default)({tabId:n})),o.push((0,se.default)({origin:e})),o.push(this.permissionLogController.createMiddleware()),o.push((0,Oe.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store),securityProviderRequest:this.securityProviderRequest.bind(this)})),t===L.SubjectType.Website&&o.push((0,ce.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),o.push((0,ie.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),setApprovalFlowLoadingText:this.approvalController.setFlowLoadingText.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getCurrentRpcUrl:()=>this.networkController.state.providerConfig.rpcUrl,getNetworkConfigurations:()=>this.networkController.state.networkConfigurations,upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),setActiveNetwork:this.networkController.setActiveNetwork.bind(this.networkController),findNetworkConfigurationBy:this.findNetworkConfigurationBy.bind(this),setProviderType:this.networkController.setProviderType.bind(this.networkController),getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),o.push(l),o.push(d.middleware),t!==L.SubjectType.Internal&&o.push(this.permissionController.createPermissionMiddleware({origin:e})),o.push(this.metamaskMiddleware),o.push((0,c.providerAsMiddleware)(i)),o}setupPublicConfig(e){const t=(0,i.storeAsStream)(this.publicConfigStore);(0,o.default)(t,e,(e=>{t.destroy(),e&&m.default.error(e)}))}addConnection(e,{engine:t}){if(e===V.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,y.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t,encryptionKey:r,encryptionSalt:n}=e,o=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);X.isManifestV3&&await this.extension.storage.session.set({loginToken:r,loginSalt:n}),o.length&&(this.preferencesController.syncAddresses(o),this.accountTracker.syncWithAddresses(o))}_onUnlock(){this.notifyAllConnections((async e=>({method:Re.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:Re.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this.notifyAllConnections({method:Re.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)})}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.memStore.getState().isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.nonceTracker.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.nonceTracker.getNonceLock(e);return t.releaseLock(),t.nextNonce}findNetworkConfigurationBy(e){const{networkConfigurations:t}=this.networkController.state;return Object.values(t).find((t=>Object.keys(e).some((r=>t[r]===e[r]))))||null}async setLedgerTransportPreference(e){if(!this.canUseHardwareWallets())return undefined;const t=this.preferencesController.getLedgerTransportPreference(),r=this.preferencesController.setLedgerTransportPreference(e),n=await this.getKeyringForDevice(K.HardwareDeviceNames.ledger);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(r).catch((e=>{throw this.preferencesController.setLedgerTransportPreference(t),e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=V.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){const e=this.platform.getExtensionURL();await this.platform.switchToAnotherURL(undefined,e)}setLocked(){var e;const[t]=this.keyringController.getKeyringsByType(B.KeyringType.trezor);t&&t.dispose();const[r]=this.keyringController.getKeyringsByType(B.KeyringType.ledger);return null==r||null===(e=r.destroy)||void 0===e||e.call(r),X.isManifestV3&&this.clearLoginArtifacts(),this.keyringController.setLocked()}async securityProviderRequest(e,t){const{currentLocale:r,transactionSecurityCheckEnabled:n}=this.preferencesController.store.getState();if(n){const n=Number((0,Z.hexToDecimal)(this.networkController.state.providerConfig.chainId));try{return await(0,Le.securityProviderCheck)(e,t,n,r)}catch(e){throw m.default.error(e.message),e}}return null}}r.default=De}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[81,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[82,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[83,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[84,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[85,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[86,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[87,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[88,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[89,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:10,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,n.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[9,{"../../../shared/modules/string-utils":3975},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("../../../shared/modules/string-utils");r.default=class{constructor(e={}){const{preferencesController:t,addressBookController:r,networkController:n,trackMetaMetricsEvent:o}=e;this.preferencesController=t,this.addressBookController=r,this.networkController=n,this._trackMetaMetricsEvent=o}async restoreUserData(e){const t=this.preferencesController.store.getState(),{preferences:r,addressBook:n,network:o}=JSON.parse(e);r&&(r.identities=t.identities,r.lostIdentities=t.lostIdentities,r.selectedAddress=t.selectedAddress,this.preferencesController.store.updateState(r)),n&&this.addressBookController.update(n,!0),o&&this.networkController.loadBackup(o),(r||n||o)&&this._trackMetaMetricsEvent({event:"User Data Imported",category:"Backup"})}async backupUserData(){const e={preferences:{...this.preferencesController.store.getState()},addressBook:{...this.addressBookController.state},network:{networkConfigurations:this.networkController.state.networkConfigurations}};delete e.preferences.identities,delete e.preferences.lostIdentities,delete e.preferences.selectedAddress;const t=JSON.stringify(e),r=new Date,o=e=>(0,n.prependZero)(e,2);return{fileName:`MetaMaskUserData.${r.getFullYear()}_${o(r.getMonth()+1)}_${o(r.getDay())}_${o(r.getHours())}_${o(r.getMinutes())}_${o(r.getDay())}.json`,data:t}}}}}},{package:"$root$",file:"app/scripts/controllers/backup.js"}],[90,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:11,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[91,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:12,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[92,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:13,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:r}=t;r&&r.provider&&"testnet"===r.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/013.js"}],[93,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:14,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/014.js"}],[94,{"../../../shared/constants/transaction":3948,lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),o=e("../../../shared/constants/transaction");var s={version:15,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=15;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=r;t.TransactionController.transactions=e.map((e=>e.err?("Gave up submitting tx."===e.err.message&&(e.status=o.TransactionStatus.failed),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #15${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/015.js"}],[95,{"../../../shared/constants/transaction":3948,lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),o=e("../../../shared/constants/transaction");var s={version:16,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=16;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>e.err?("transaction with the same hash was already imported."===e.err&&(e.status=o.TransactionStatus.submitted,delete e.err),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #16${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/016.js"}],[96,{"../../../shared/constants/transaction":3948,lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),o=e("../../../shared/constants/transaction");var s={version:17,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=17;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>(!e.status===o.TransactionStatus.failed||e.retryCount>0&&e.retryCount<2&&(e.status=o.TransactionStatus.submitted,delete e.err),e)))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #17${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/017.js"}],[97,{"../controllers/transactions/lib/tx-state-history-helpers":29,lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),o=e("../controllers/transactions/lib/tx-state-history-helpers");var s={version:18,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=18;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>{if(!e.history||0===e.history.length){const t=(0,o.snapshotFromTxMeta)(e);return e.history=[t],e}const t=(0,o.migrateFromSnapshotsToDiffs)(e.history).filter((e=>!Array.isArray(e)||e.length>0));return e.history=t,e}))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #18${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/018.js"}],[98,{"../../../shared/constants/transaction":3948,lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),o=e("../../../shared/constants/transaction");var s={version:19,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=19;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map(((e,t,r)=>{if(e.status!==o.TransactionStatus.submitted)return e;const n=function(e){const t=e.map((e=>{const{nonce:t}=e.txParams;return parseInt(t||"0x0",16)}));return Math.max.apply(null,t)}(r.filter((e=>e.status===o.TransactionStatus.confirmed)).filter((t=>t.txParams.from===e.txParams.from)).filter((t=>t.metamaskNetworkId.from===e.metamaskNetworkId.from))),s=function(e,t){const r=e.map((e=>{const{nonce:t}=e.txParams;return parseInt(t,16)}));let n=t;for(;r.includes(n);)n+=1;return n}(r.filter((e=>e.status===o.TransactionStatus.submitted)).filter((t=>t.txParams.from===e.txParams.from)).filter((t=>t.metamaskNetworkId.from===e.metamaskNetworkId.from)),n),i=Math.max(s,n);return parseInt(e.txParams.nonce,16)>i+1&&(e.status=o.TransactionStatus.failed,e.err={message:"nonce too high",note:"migration 019 custom error"}),e}))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #19${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/019.js"}],[99,{lodash:3426},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var o={version:20,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=20;try{const e=function(e){const t=e;"metamask"in t&&!("firstTimeInfo"in t.metamask)&&(t.metamask.firstTimeInfo={version:"3.12.0",date:Date.now()});return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #20${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/020.js"}],[5,{"../../shared/constants/app":3930,"../../shared/constants/metametrics":3937,"../../shared/modules/browser-runtime.utils":3959,"../../shared/modules/mv3.utils":3968,"../../shared/modules/object.utils":3970,"./first-time-state":35,"./lib/createStreamSink":46,"./lib/ens-ipfs/setup":51,"./lib/get-first-preferred-lang-code":53,"./lib/getObjStructure":54,"./lib/local-store":55,"./lib/migrator":58,"./lib/network-store":59,"./lib/notification-manager":60,"./lib/setupSentry":77,"./lib/util":79,"./metamask-controller":80,"./migrations":169,"./platforms/extension":170,"@metamask/obs-store":1324,"debounce-stream":2412,"end-of-stream":2452,"eth-rpc-errors":2571,events:2171,"extension-port-stream":2655,loglevel:3438,pump:3578,"webextension-polyfill":3914},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.loadStateFromPersistence=ie,r.setupController=ae,r.statePersistenceEvents=void 0;var n=O(e("events")),o=O(e("end-of-stream")),s=O(e("pump")),i=O(e("debounce-stream")),a=O(e("loglevel")),l=O(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=O(e("extension-port-stream")),h=e("eth-rpc-errors"),u=e("../../shared/constants/app"),p=e("../../shared/constants/metametrics"),g=e("../../shared/modules/browser-runtime.utils"),C=e("../../shared/modules/mv3.utils"),m=e("../../shared/modules/object.utils"),f=O(e("./migrations")),k=O(e("./lib/migrator")),b=O(e("./platforms/extension")),w=O(e("./lib/local-store")),v=(O(e("./lib/network-store")),e("./lib/setupSentry")),y=O(e("./lib/createStreamSink")),T=R(e("./lib/notification-manager")),S=R(e("./metamask-controller")),M=O(e("./first-time-state")),P=O(e("./lib/get-first-preferred-lang-code")),A=O(e("./lib/getObjStructure")),E=O(e("./lib/ens-ipfs/setup")),N=e("./lib/util");function I(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(I=function(e){return e?r:t})(e)}function R(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=I(t);if(r&&r.has(e))return r.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}function O(e){return e&&e.__esModule?e:{default:e}}const{sentry:L}=global,_={...M.default},F={[u.ENVIRONMENT_TYPE_POPUP]:!0,[u.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[u.ENVIRONMENT_TYPE_FULLSCREEN]:!0},U=["trezor-connect"];a.default.setDefaultLevel("info");const D=new b.default,x=new T.default;let j=!1,K=!1,B=!1;const $={},q={};let G;const V=new w.default;let H;const W=new URL("https://metamask.github.io/phishing-warning/v2.1.0/"),z=1e3,Q="ACK_KEEP_ALIVE_MESSAGE",Y="WORKER_KEEP_ALIVE_MESSAGE",J=new n.default;r.statePersistenceEvents=J;const{promise:X,resolve:Z,reject:ee}=(0,N.deferredPromise)(),te=async()=>{const e=await l.default.tabs.query({url:"<all_urls>",windowType:"normal"}).then((e=>((0,g.checkForLastErrorAndLog)(),e))).catch((()=>{(0,g.checkForLastErrorAndLog)()}));for(const t of e)l.default.tabs.sendMessage(t.id,{name:u.EXTENSION_MESSAGES.READY}).then((()=>{(0,g.checkForLastErrorAndLog)()})).catch((()=>{(0,g.checkForLastErrorAndLog)()}))};let re,ne;async function oe(){try{const e=await ie(),t=await(0,P.default)();let r;if(C.isManifestV3){const e=await l.default.storage.session.get(["isFirstMetaMaskControllerSetup"]);r=(null==e?void 0:e.isFirstMetaMaskControllerSetup)===undefined,await l.default.storage.session.set({isFirstMetaMaskControllerSetup:r})}ae(e,t,{},r),C.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v2.1.0/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const o=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new se)),z),await o}catch(e){e instanceof se?console.warn("Phishing warning page timeout; page not guaraneteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),await te(),a.default.info("MetaMask initialization complete."),Z()}catch(e){ee(e)}}l.default.runtime.onConnect.addListener((async(...e)=>{await X,re(...e)})),l.default.runtime.onConnectExternal.addListener((async(...e)=>{await X,ne(...e)}));class se extends Error{constructor(){super("Timeout failed")}}async function ie(){const e=new k.default({migrations:f.default});if(e.on("error",console.warn),H=await V.get()||e.generateInitialState(_),H&&!H.data&&(H=e.generateInitialState(_),L.captureMessage("MetaMask - Empty vault found - unable to recover")),e.on("error",(e=>{const t=(0,A.default)(H);L.captureException(e,{extra:{vaultStructure:t}})})),H=await e.migrateData(H),!H)throw new Error("MetaMask - migrator returned undefined");return V.setMetadata(H.meta),V.set(H.data),H.data}function ae(e,t,r,n){var g;G=new S.default({infuraProjectId:"b6bf7d3508c941499b10025c0776eaf8",showUserConfirmation:le,initState:e,initLangCode:t,platform:D,notificationManager:x,browser:l.default,getRequestAccountTabIds:()=>q,getOpenMetamaskTabsIds:()=>$,localStore:V,overrides:r,isFirstMetaMaskControllerSetup:n}),(0,E.default)({getCurrentChainId:()=>G.networkController.state.providerConfig.chainId,getIpfsGateway:G.preferencesController.getIpfsGateway.bind(G.preferencesController),provider:G.provider}),(0,s.default)((0,c.storeAsStream)(G.store),(0,i.default)(1e3),(0,y.default)((async e=>{await V.set(e),J.emit("state-persisted",e)})),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)})),g=G,global.stateHooks.getSentryState=function(){const e=g.getState(),t=(0,m.maskObject)({metamask:e},v.SENTRY_STATE);return{browser:window.navigator.userAgent,store:t,version:D.getVersion()}};const f=()=>j||Boolean(Object.keys($).length)||K,k=(e,t)=>{if(!1===e)G.onClientClosed();else{if(t===u.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys($).length))return;G.onEnvironmentTypeClosed(t)}};function b(){let e="";const t=w();t&&(e=String(t)),C.isManifestV3?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function w(){return G.approvalController.getTotalApprovalCount()+G.appStateController.waitingForUnlock.length}re=async e=>{var t;const n=e.name;if(U.includes(e.name))return;let s=!1;const i=(0,N.getPlatform)(),a=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(s=i===u.PLATFORM_FIREFOX?F[n]:(null==a?void 0:a.origin)===`chrome-extension://${l.default.runtime.id}`,s){var c;const t=(null==r||null===(c=r.getPortStream)||void 0===c?void 0:c.call(r,e))||new d.default(e);if(G.isClientOpen=!0,G.setupTrustedCommunication(t,e.sender),C.isManifestV3&&e.onMessage.addListener((t=>{t.name===Y&&(e.postMessage({name:Q}),G.appStateController.setServiceWorkerLastActiveTime(Date.now()))})),n===u.ENVIRONMENT_TYPE_POPUP&&(j=!0,(0,o.default)(t,(()=>{j=!1;const e=f();G.isClientOpen=e,k(e,u.ENVIRONMENT_TYPE_POPUP)}))),n===u.ENVIRONMENT_TYPE_NOTIFICATION&&(K=!0,(0,o.default)(t,(()=>{K=!1;const e=f();G.isClientOpen=e,k(e,u.ENVIRONMENT_TYPE_NOTIFICATION)}))),n===u.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;$[r]=!0,(0,o.default)(t,(()=>{delete $[r];const e=f();G.isClientOpen=e,k(e,u.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(a&&a.origin===W.origin&&a.pathname===W.pathname){var h;const t=(null==r||null===(h=r.getPortStream)||void 0===h?void 0:h.call(r,e))||new d.default(e);G.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;e.onMessage.addListener((e=>{e.data&&"eth_requestAccounts"===e.data.method&&(q[n]=t)}))}ne(e)}},ne=e=>{var t;const n=(null==r||null===(t=r.getPortStream)||void 0===t?void 0:t.call(r,e))||new d.default(e);G.setupUntrustedCommunication({connectionStream:n,sender:e.sender})},null!=r&&r.registerConnectListeners&&r.registerConnectListeners(re,ne),b(),G.txController.on(S.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),G.decryptMessageController.hub.on(S.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),G.encryptionPublicKeyController.hub.on(S.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),G.signatureController.hub.on(S.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),G.appStateController.on(S.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),G.controllerMessenger.subscribe(S.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,b),G.txController.initApprovals(),x.on(T.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{e?w()>0&&le():(Object.keys(G.txController.txStateManager.getUnapprovedTxList()).forEach((e=>G.txController.txStateManager.setTxStatusRejected(e))),G.signatureController.rejectUnapproved(p.REJECT_NOTIFICATION_CLOSE_SIG),G.decryptMessageController.rejectUnapproved(p.REJECT_NOTIFICATION_CLOSE),G.encryptionPublicKeyController.rejectUnapproved(p.REJECT_NOTIFICATION_CLOSE),Object.values(G.approvalController.state.pendingApprovals).forEach((({id:e,type:t})=>{G.approvalController.reject(e,h.ethErrors.provider.userRejectedRequest())})),b())}))}async function le(){const e=await D.getActiveTabs(),t=Boolean(e.find((e=>$[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!B&&(r||!j)&&!t){B=!0;try{const e=G.appStateController.getCurrentPopupId();await x.showPopup((e=>G.appStateController.setCurrentPopupId(e)),e)}finally{B=!1}}}const ce=()=>{if(G)return G.metaMetricsController.updateTraits({[p.MetaMetricsUserTrait.InstallDateExt]:(new Date).toISOString().split("T")[0]}),void G.metaMetricsController.addEventBeforeMetricsOptIn({category:p.MetaMetricsEventCategory.App,event:p.MetaMetricsEventName.AppInstalled,properties:{}});setTimeout((()=>{ce()}),1e3)};l.default.runtime.onInstalled.addListener((({reason:e})=>{"install"===e&&(ce(),D.openExtensionInBrowser())})),oe().catch(a.default.error)}}},{package:"$root$",file:"app/scripts/background.js"}]],[5],{});